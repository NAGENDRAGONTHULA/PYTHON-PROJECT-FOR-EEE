# -*- coding: utf-8 -*-
"""Nicky Nag.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BzXJfpdL31rD2PFmL1LAOhzPQbAd_sWA
"""

a=int(input("enter a number:"))
b=int(input("enter b number:"))
squares=(x**2 for x in range(10))
print("squares:", list(squares))

def greet(name):
  print("hello",name)
  greet("alice")

a=int(input("enter a number:"))
if num%2==0:
    print(f"{num}is even")
else:
      print(f"{num}is odd")

colors=["red","green","blue"]
for color in colors:
  print("color:",color)

person=("john",25,"usa")
print("person tuple:",person)

name=["nagi","deva","raghu"]
marks=[(80,90,80),(90,70,80),(80,60,70)]

def total_and_avg(scores):
  total = sum(scores)
  avg = total / len(scores)
  return total, avg

for i in range(len(name)):
  total, avg = total_and_avg(marks[i])
  print(f"name: {name[i]}, total: {total}, average: {avg:.2f}")

name=["raghu","nagi","deva"]
print("first element:",name[0])
print("last element:",name[-2])

def deva(name):
 print("hello",name)
deva("vishnu")

def add(a,b):
  return a+b
result=add(5,6)
print("sum is:",result)

def nagi(d,r):
  return d*r
result=nagi(45,60)
print("mult is:",result)

v=230
i=5
p=v*i
print("power:",p,"watts")

resistors=[4,6,10]
total_resistance=sum(resistors)
print("total resistance in series:",total_resistance,"ohms")

def ohms_law(voltage=None,current=None,resistance=None):
  if voltage is None:
    return current*resistance
  elif current is None:
    return voltage/resistance
  elif resistance is None:
    return voltage/current
v=ohms_law(current=2,resistance=5)
print("voltage:",v,"v")

def volume_cuboid(length,width,height):
  return length*width*height
length=0.5#meters
width=0.5
height=3
volume=volume_cuboid(length,width,height)
print("concrete voume:",volume,"m***3")

import math
radius=5
area=math.pi*radius**2
print("area of circle:",area,"cm**2")

num=int(input("enter anumber:"))
for i in range(1,27):
  print(f"{num}*{i}={num*i}")

mass=1000
velocity=20
ke=0.5*mass*velocity**2
print("kinetic energy:",ke,"jolues")

n=int(input("enter a number:"))
a=[1,2]
b=[1,2]
c=print(a==b)
print(a is b)

def greet(raghu):
  print(f"hello,{raghu}")
  greet("deva")

mass=1000
velocity=20
ke=0.5
print("Kinetic Energy :",ke,"Joules")

def celsius_to_faherenheit(c):
  return(c*9/5)+32
temp_c=25
print("temperature in fahrenheist:",celsius_to_faherenheit(temp_c))

op=800
ip=1000
efficiency=(op/ip)*100
print("efficiency=",efficiency,"%")

import math
a=4
omega=2*math.pi
t=0.5
x=a*math.cos(omega*t)
print("displacement:",x,"m")

text="python is easy"
print(text.upper())
print(text[1])
print(text[2])

#lists:
fruits=["apple","banana","cherry"]
fruits.append("apple")
#set:
numbers={1,2,3,3}
print(numbers)#duplicates removed
#tuple:
dimensions=(10,20,30)
print(dimensions[0])

#dictionaries:
person={"name":"bob","age":20,"marks":95}
print(person["name"])
person["marks"]=74
print(person)

marks=int(input("enter marks"))
if marks>=90:
  print("grade a")
elif marks>=60:
  print("grade b")
else:
  print("grade c")

def torque(force,radius):
  return force*radius
print("torque:",torque(66,0.9),"N.m")

import random
otp=random.randint(100000,999999)
print("your otp is:",otp)
entered_otp=int(input("enter otp:"))
if entered_otp==otp:
  print("your otp is success")
else:
  print("otp is invalid try again later")

machine={"name":"lathe","power":5.5,"unit":"kw"}
print("machine:",machine["name"])
print("power:",machine["power"],machine["unit"])

text="python is fun"
print(text.upper())
print(text[0]) # Access the first character
print(text[2]) # Access the third character

#tuples
telivision=[22,545,44]
print(telivision[1])

#sets
python={88,55,589,55,88}
print(python)

#lists
market=[855,485,584]
market.append(485)
market.remove(584)
print(market)

for i in  range(1,11):
  for j in range(1,23):
    print(f"{i}*{j}={i*j}")

voltages=[230,120,12]
currents=[5,10,0.5]
for v,i in zip(voltages,currents):
  power=v*i
  print(f"power for {v}v and{i}A:{power}watts")

#using components
components={"resistors","capacitors","inductors"}
print("unique components:",components)

def voltage (current,resistance):
  return current*resistance
print(f"voltage: {voltage(2,4)} volts")

class Machines:
  def efficiency(self):
    return"efficiency not defined"
class motor(Machines):
  def efficiency(self):
    return"motor efficiency:90%"
class generator(Machines):
  def efficiency(self):
    return"generator efficiency:80%"
Machines=[motor(),generator()]
for m in Machines:
  print(m.efficiency())

import random
otp=random.randint(1000,9999)
print("aswan otp:",otp)
entered_otp=int(input("enter otp:"))
if entered_otp==otp:
  print("otp verified successfully:")
else:
  print("invaild otp please try again:")

#CONCRETE MIX VOLUME CALCULATION

#RLC CIRCUIT IMPEDENCE
import math
def rlc_impedence(r,l,c,f):
  xl=2*math.pi*f*l
  xc=1/(2*math.pi*f*c)
  return math.sqrt(r**2+(xl-xc)**2)
r=100
l=0.5#h
c=1e-6#f
f=50#hz
print("rlc circuit impedence:",rlc_impedence(r,l,c,f),"ohms")

#three phase power calculation
import math
def three_phase_power(V_line,I_line,power_factor):
  return math.sqrt(3)*V_line*I_line*power_factor
print("three-phase power:",three_phase_power(415,10,0.8),"watts")

def double_numbers(numbers):
  doubled=[]
  for n in numbers:
   doubled.append(n*2)
  return doubled
numbers=[8,5,2,6,5]
result=double_numbers(numbers)
print("orginal",numbers)
print("doubled:",result)

import math
def three_phase_power(v_line,i_line,power_factor):
  return math.sqrt(3)*v_line*i_line*power_factor
print("three-phase power:",three_phase_power(415,10,0.9),"watts")

#access elements intuple
num=[10,90,35]
if len(num) > 10:
  print("first element:",num[1])
  print("second element:",num[-2])
else:
   print("third element:",num[-1])

def add_numbers(a,b):
  return a+b
result=add_numbers(4,55)
print("num is:",result)

count=0
while count<5:
  print("count:",count)
  count+=1

for i in range(8):
  print("coole",i)

names=["ntr","babu","aa","balayya"]
for i, name in enumerate(names):
  print(f"{name} [{i+1}]")

#json &apis
import json
with open('machine_config.json')as f:
  machine_config=json.load(f)
print(f"rated speed{machine_config['motor']['rated_speed']})

#json &apis
import json
with open('machine_config.json')as f:
  machine_config=json.load(f)

# The original code used 'config' instead of 'machine_config'.
# Also, the key 'rated_speed' was misspelled in the original output.
print(f"Rated speed: {machine_config['motor']['rated_speed']}")

# Create a dummy machine_config.json file
dummy_config = {
    "motor": {
        "rated_speed": 1500
    }
}

import json

with open('machine_config.json', 'w') as f:
    json.dump(dummy_config, f)

print("Created dummy 'machine_config.json' file.")

#scipy for calculations
from scipy.optimize import fsolve
def eq(x):
  return 3*x**2-x-1
root=fsolve(eq,0)
print('root:',root)

#multi processing
from multiprocessing import Pool
def square(n):
  return n*n
with Pool(processes=4) as p:
    print(p.map(square,[1,2,3,4,5]))

#data flirting
import numpy as np
from scipy.optimize import curve_fit
def model(z,a,b):
   return a*np.exp(b*x)
x=np.linspace(0,4,50)
y=model(x,2,0.5)+np.random.normal(0,0.2,50)
popt,_=curve_fit(model,x,y)
print(popt)

#advance
import numpy as np
arr=np.array([4,6,9,15])
print(arr)

thirdyear_list=[10,500,1000]
print("orginal",thirdyear_list)
thirdyear_list.append(666)
thirdyear_list[2]=666
print("updates",thirdyear_list)

student_tuple=(1,2,3,4,5,6,7,8,9,10)
print("orginal",student_tuple)
new_tuple=student_tuple+(11,0)
print("updated",new_tuple)

for i in range(1,10):
  for j in range(1,10):
    print("జై శ్రీ కృష్ణ",end='\t')
  print("\n")

student_set={1,2,3,4,5,6,7,8,9,10}
print("orginal",student_set)
student_set.add(11)
student_set.remove(3)
student_set.remove(1)
print("update",student_set)

class address:
  def__int__(self,street,city,state):
    self.street=street
    self.city=city
    self.state=state
s1=address("bc colony","dornipadu","ap")
print(s1.street,s1.city,s1.state)

for i in range(1,50):
  for j in range(1,50):
    print("జై శ్రీ కృష్ణ",end='\t')
  print("\n")

import numpy as np
matrix_a=np.array([[1,2],[7,8]])
matrix_b=np.array([[8,9],[4,5]])
add=np.add(matrix_a,matrix_b)
print("addition:\n",add)

#expecting handling
try:
  data=float(input('enter load value'))
  print(f"input recieved :{data}")
except valueerror:
  print('invalid input!enter a number')

def vegetables:
  print(f"potato","brinjal","tomoto","lady finger")

import matplotlib.pyplot as plt
import numpy as np
x=np.linspace(0,2*np.pi,60)
y=np.sin(x)
y1=np.sin(x-(2*np.pi)/3)
y2=np.sin(x-(4*np.pi)/3)
y3=np.sin(x-x)
plt.plot(x,y)
plt.plot(x,y1)
plt.plot(x,y2)
plt.plot(x,y3)
plt.xlabel("wt")
plt.ylabel("voltage")
plt.title("3-phase sine wave")
plt.show()

#spicy for calculations
from scipy.optimize import fsolve
def eq(x):
  return 3*x**2-x-1
root=fsolve(eq,0)
print('Root:',root)

#monte carlo simulation
import numpy as np
sample=np.random.normal(50,5,100000)
failure_rate=np.mean(sample>60)
print('failure rate:',failure_rate*100,'%')

#mathplotlib
import matplotlib.pyplot as plt
stress=[0,50,100,150,200]
strain=[0,0.002,0.004,0.006,0.008]
plt.plot(strain,stress,marker='o')
plt.xlabel("strain")
plt.ylabel("stress(mpa)")
plt.title("stess-strain curve")
plt.show()

"""#pandas
import pandas as pd
df=pd.data frame({"beam id"})



"""

class person:
  def __init__(self,fname,lname):
    self.first_name=fname
    self.last_name=lname
  def greet(self):
    print(f"yooyoo {self.first_name} {self.last_name}")
x=person("nagendra","yadav")
x.greet()

class object:
  def __init__(self):
    pass

# Calculate power from voltage and current
voltage = float(input("Enter voltage (V): "))
current = float(input("Enter current (A): "))

power = voltage * current

print(f"Calculated Power: {power} Watts")

# Display the final State of Charge (SOC) from the battery simulation
print(f"Final State of Charge (SOC): {state_of_charge:.2f}")

numpy is a library for working with arrays and mathematical functions

import numpy as np
import matplotlib.pyplot as plt

# NumPy is a library for working with arrays and mathematical functions.
# Matplotlib is a library for creating static, interactive, and animated visualizations in Python.

print("NumPy and Matplotlib libraries imported.")

# Design FIR and IIR filters

from scipy import signal
import matplotlib.pyplot as plt
import numpy as np

# Generate a noisy signal
fs = 1000  # Sampling frequency
t = np.linspace(0, 1, fs, endpoint=False)
sig = np.sin(2*np.pi*10*t) + np.sin(2*np.pi*20*t) + np.random.randn(len(t))*0.1 # 10Hz and 20Hz sine waves with noise

# Design a Butterworth low-pass filter (IIR)
nyq = 0.5 * fs  # Nyquist frequency
normal_cutoff = 15 / nyq
b, a = signal.butter(4, normal_cutoff, btype='low', analog=False) # 4th order Butterworth filter

# Apply the filter
filtered_sig_iir = signal.filtfilt(b, a, sig)

# Design a FIR low-pass filter using the window method
fir_coeff = signal.firwin(101, 15, fs=fs, pass_zero='lowpass') # 101 is the number of taps, 15 is the cutoff frequency

# Apply the filter
filtered_sig_fir = signal.convolve(sig, fir_coeff, mode='same')

# Plot the original and filtered signals
plt.figure(figsize=(10, 6))
plt.plot(t, sig, label='Original Signal')
plt.plot(t, filtered_sig_iir, label='IIR Filtered Signal')
plt.plot(t, filtered_sig_fir, label='FIR Filtered Signal')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.title('Original and Filtered Signals')
plt.legend()
plt.grid(True)
plt.show()

from scipy import signal
import numpy as np

def apply_filter(noisy_signal, filter_type, filter_params):
  """
  Applies a filter to a noisy signal.

  Args:
    noisy_signal: The input signal with noise.
    filter_type: Type of filter ('fir' or 'iir').
    filter_params: Dictionary of parameters for the filter.

  Returns:
    The filtered signal.
  """
  if filter_type == 'fir':
    # Example FIR filter design (you can customize this based on filter_params)
    cutoff_freq = filter_params.get('cutoff_freq', 15)
    num_taps = filter_params.get('num_taps', 101)
    fs = filter_params.get('fs', 1000)
    fir_coeff = signal.firwin(num_taps, cutoff_freq, fs=fs, pass_zero='lowpass')
    filtered_signal = signal.convolve(noisy_signal, fir_coeff, mode='same')
  elif filter_type == 'iir':
    # Example IIR filter design (you can customize this based on filter_params)
    cutoff_freq = filter_params.get('cutoff_freq', 15)
    order = filter_params.get('order', 4)
    fs = filter_params.get('fs', 1000)
    nyq = 0.5 * fs
    normal_cutoff = cutoff_freq / nyq
    b, a = signal.butter(order, normal_cutoff, btype='low', analog=False)
    filtered_signal = signal.filtfilt(b, a, noisy_signal)
  else:
    raise ValueError("Invalid filter_type. Choose 'fir' or 'iir'.")

  return filtered_signal

# Example usage:
# Generate a noisy signal (replace with your actual noisy signal)
fs = 1000
t = np.linspace(0, 1, fs, endpoint=False)
noisy_sig = np.sin(2*np.pi*10*t) + np.sin(2*np.pi*20*t) + np.random.randn(len(t))*0.1

# Define filter parameters
fir_params = {'cutoff_freq': 15, 'num_taps': 101, 'fs': fs}
iir_params = {'cutoff_freq': 15, 'order': 4, 'fs': fs}

# Apply the filters
filtered_sig_fir = apply_filter(noisy_sig, 'fir', fir_params)
filtered_sig_iir = apply_filter(noisy_sig, 'iir', iir_params)

# You can now use filtered_sig_fir and filtered_sig_iir for further analysis or plotting.

from scipy import signal
import matplotlib.pyplot as plt
import numpy as np

def apply_filter_and_get_response(noisy_signal, filter_type, filter_params):
  """
  Applies a filter to a noisy signal and returns the filtered signal and frequency response.

  Args:
    noisy_signal: The input signal with noise.
    filter_type: Type of filter ('fir' or 'iir').
    filter_params: Dictionary of parameters for the filter.

  Return:
    A tuple containing:
      - filtered_signal: The filtered signal.
      - w: The frequencies at which the response was computed (for frequency response).
      - h: The frequency response of the filter (for frequency response).
  """
  if filter_type == 'fir':
    cutoff_freq = filter_params.get('cutoff_freq', 15)
    num_taps = filter_params.get('num_taps', 101)
    fs = filter_params.get('fs', 1000)
    fir_coeff = signal.firwin(num_taps, cutoff_freq, fs=fs, pass_zero='lowpass')
    filtered_signal = signal.convolve(noisy_signal, fir_coeff, mode='same')
    w, h = signal.freqz(fir_coeff, worN=8000)
  elif filter_type == 'iir':
    cutoff_freq = filter_params.get('cutoff_freq', 15)
    order = filter_params.get('order', 4)
    fs = filter_params.get('fs', 1000)
    nyq = 0.5 * fs
    normal_cutoff = cutoff_freq / nyq
    b, a = signal.butter(order, normal_cutoff, btype='low', analog=False)
    filtered_signal = signal.filtfilt(b, a, noisy_signal)
    w, h = signal.freqz(b, a, worN=8000)
  else:
    raise ValueError("Invalid filter_type. Choose 'fir' or 'iir'.")

  return filtered_signal, w, h

# Example usage:
# Generate a noisy signal (replace with your actual noisy signal)
fs = 1000
t = np.linspace(0, 1, fs, endpoint=False)
noisy_sig = np.sin(2*np.pi*10*t) + np.sin(2*np.pi*20*t) + np.random.randn(len(t))*0.1

# Define filter parameters
fir_params = {'cutoff_freq': 15, 'num_taps': 101, 'fs': fs}
iir_params = {'cutoff_freq': 15, 'order': 4, 'fs': fs}

# Apply the filters and get results
filtered_sig_fir, w_fir, h_fir = apply_filter_and_get_response(noisy_sig, 'fir', fir_params)
filtered_sig_iir, w_iir, h_iir = apply_filter_and_get_response(noisy_sig, 'iir', iir_params)

# Display or plot the results as needed
print("FIR Filtered Signal (first 10 elements):", filtered_sig_fir[:10])
print("IIR Filtered Signal (first 10 elements):", filtered_sig_iir[:10])

# Plot frequency response
plt.figure(figsize=(10, 6))
plt.plot(0.5*fs*w_fir/np.pi, np.abs(h_fir), label='FIR Filter Frequency Response')
plt.plot(0.5*fs*w_iir/np.pi, np.abs(h_iir), label='IIR Filter Frequency Response')
plt.xlabel('Frequency (Hz)')
plt.ylabel('Magnitude')
plt.title('Filter Frequency Responses')
plt.legend()
plt.grid(True)
plt.show()

# Import necessary libraries
from scipy import signal
import matplotlib.pyplot as plt

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import chirp, sawtooth

# Generate a sample communication system signal (e.g., a simple sine wave)
fs_comm = 1000  # Sampling frequency for communication signal
t_comm = np.linspace(0, 1, fs_comm, endpoint=False)
comm_signal = 0.5 * np.sin(2 * np.pi * 50 * t_comm)  # 50 Hz sine wave

# Generate a sample ECG-like signal (simplified)
fs_ecg = 250  # Sampling frequency for ECG signal
t_ecg = np.linspace(0, 2, fs_ecg * 2, endpoint=False)
# A simplified ECG-like signal with a few peaks
ecg_signal = (
    1.5 * np.sin(2 * np.pi * 1.2 * t_ecg) * np.exp(-5 * t_ecg)
    + 0.8 * np.sin(2 * np.pi * 2.5 * t_ecg) * np.exp(-10 * t_ecg)
    + 0.4 * sawtooth(2 * np.pi * 5 * t_ecg)
)


# Plot the generated signals
plt.figure(figsize=(12, 6))

plt.subplot(2, 1, 1)
plt.plot(t_comm, comm_signal)
plt.title("Sample Communication System Signal")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")

plt.subplot(2, 1, 2)
plt.plot(t_ecg, ecg_signal)
plt.title("Sample ECG-like Signal")
plt.xlabel("Time [s]")
plt.ylabel("Amplitue")

plt.tight_layout()
plt.show()

for i in range (1,8):
  for j in range (1,9):
    print("hi",end='\t')
  print("\n")

def greet(eee):
  print("power system","dc machines",eee)
greet("control systems")
greet("power electronics")

def print_cricket(cricket_list):
  for cricket in cricket_list:
    print("dhoni",cricket)
cricket=["virat","rohit","gill"]
print_cricket(cricket)

import matplotlib.pyplot as plt
import numpy as np # Import numpy
m,k=10,50.0
omega=np.linspace(0,2,200)
# The original error was due to multiplying arrays of different shapes (omega and t).
# To plot x against t, x should have the same shape as t.
# Assuming the intention is to use a single frequency from omega for this plot,
# we'll use the first value of omega.
# If a different calculation involving both omega and t was intended, please provide details.
# We also need a 't' array with 1000 elements, similar to other cells in the notebook.
fs = 1000
t = np.linspace(0, 1, fs, endpoint=False)

x=np.cos(omega[0]*t) # Use the first frequency from omega and the t array

plt.plot(t,x);
plt.xlabel("t")
plt.ylabel("x")
plt.title("Cosine wave")
plt.show()

